package com.walter.teasers;


import java.util.ArrayList;
import java.util.UUID;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;
 
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
 
public class DBController  extends SQLiteOpenHelper {
 
    public DBController(Context applicationcontext) {
        super(applicationcontext, "mydb.db", null, 1);
    }
    //Creates Table
    @Override
    public void onCreate(SQLiteDatabase database) {
        String query;                  // _id,                  _originAddress,     _messageBody,       _messageDate,    _updateStatus,     String _guid
        query = "CREATE TABLE users ( userId INTEGER PRIMARY KEY, originAddress TEXT, messageBody TEXT, messageDate TEXT,  udpateStatus TEXT, guid TEXT)";
        database.execSQL(query);
    }
    @Override
    public void onUpgrade(SQLiteDatabase database, int version_old, int current_version) {
        String query;
        query = "DROP TABLE IF EXISTS users";
        database.execSQL(query);
        onCreate(database);
    }
    /**
     * Inserts User into SQLite DB
     * @param queryValues
     */
    public void insertUser(String originAddress,String email,String phone,String location) 
    {
        SQLiteDatabase database = this.getWritableDatabase();
        ContentValues values = new ContentValues();
        //values.put("userName", queryValues.get("userName"));
        String  uniqueID = UUID.randomUUID().toString();        
        values.put("originAddress", originAddress);
        values.put("messageBody", email);
        values.put("messageDate", phone);
        values.put("updateStatus", "no");
        values.put("guid", uniqueID);
        database.insert("users", null, values);
        database.close();
    }
 
    /**
     * Get list of Users from SQLite DB as Array List
     * @return
     */
    public ArrayList<Details> getAllUsers() 
    {
        ArrayList<Details> wordList;
        wordList = new ArrayList<Details>();
        String selectQuery = "SELECT  * FROM users";
        SQLiteDatabase database = this.getWritableDatabase();
        Cursor cursor = database.rawQuery(selectQuery, null);
        if (cursor.moveToFirst()) 
        {
            do {
            	                                 // _id,     _originAddress,     _messageBody,       _messageDate,          _updateStatus,         String _guid
            	Details data=new Details(cursor.getString(0),cursor.getString(1),cursor.getString(2), cursor.getString(3),cursor.getString(4),cursor.getString(5));
                wordList.add(data);
               } 
            while (cursor.moveToNext());
        }
        database.close();
        return wordList;
    }
 
    /**
     * Compose JSON out of SQLite records
     * @return
     */
    public String composeJSONfromSQLite()
    {
        ArrayList<Details> wordList;
        wordList = new ArrayList<Details>();
        String selectQuery = "SELECT  * FROM users where udpateStatus = '"+"no"+"'";
        SQLiteDatabase database = this.getWritableDatabase();
        Cursor cursor = database.rawQuery(selectQuery, null);
        if (cursor.moveToFirst()) {
            do {
            	Details data=new Details(cursor.getString(0),cursor.getString(1),cursor.getString(2), cursor.getString(3),cursor.getString(4),cursor.getString(5));
                wordList.add(data);
               } 
            while (cursor.moveToNext());
        }
        database.close();
        Gson gson = new GsonBuilder().create();
        //Use GSON to serialize Array List to JSON       
        return gson.toJson(wordList);
    }
 
    /**
     * Get Sync status of SQLite
     * @return
     */
    public String getSyncStatus()
    {
        String msg = null;
        if(this.dbSyncCount() == 0)
        {
            msg = "SQLite and Remote MySQL DBs are in Sync!";
        }else{
            msg = "DB Sync needed\n";
        }
        return msg;
    }
 
    /**
     * Get SQLite records that are yet to be Synced
     * @return
     */
    public int dbSyncCount()
    {
        int count = 0;
        String selectQuery = "SELECT  * FROM users where udpateStatus = '"+"no"+"'";
        SQLiteDatabase database = this.getWritableDatabase();
        Cursor cursor = database.rawQuery(selectQuery, null);
        count = cursor.getCount();
        database.close();
        return count;
    }
 
    /**
     * Update Sync status against each User ID
     * @param id
     * @param status
     */
    public void updateSyncStatus(String id, String status)
    {
        SQLiteDatabase database = this.getWritableDatabase();    
        String updateQuery = "Update users set udpateStatus = '"+ status +"' where userId="+"'"+ id +"'";
        Log.d("query",updateQuery);       
        database.execSQL(updateQuery);
        database.close();
    }
}